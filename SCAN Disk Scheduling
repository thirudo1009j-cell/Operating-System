#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, head, i, j, total = 0, size, direction;

    printf("Enter number of disk requests: ");
    scanf("%d", &n);

    int request[n];
    printf("Enter the request sequence: ");
    for (i = 0; i < n; i++)
        scanf("%d", &request[i]);

    printf("Enter initial head position: ");
    scanf("%d", &head);

    printf("Enter total disk size (e.g. 200): ");
    scanf("%d", &size);

    printf("Enter head movement direction (1 for high, 0 for low): ");
    scanf("%d", &direction);

    // Sort the request array
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (request[i] > request[j]) {
                int temp = request[i];
                request[i] = request[j];
                request[j] = temp;
            }
        }
    }

    // Find the head position in the sorted request list
    int index;
    for (i = 0; i < n; i++) {
        if (head < request[i]) {
            index = i;
            break;
        }
    }

    printf("\nSeek Sequence: ");

    // Moving towards higher track numbers
    if (direction == 1) {
        for (i = index; i < n; i++) {
            printf("%d ", request[i]);
            total += abs(request[i] - head);
            head = request[i];
        }
        // Move to the end of the disk
        total += abs(size - 1 - head);
        head = size - 1;
        // Move in reverse direction
        for (i = index - 1; i >= 0; i--) {
            printf("%d ", request[i]);
            total += abs(request[i] - head);
            head = request[i];
        }
    }

    // Moving towards lower track numbers
    else {
        for (i = index - 1; i >= 0; i--) {
            printf("%d ", request[i]);
            total += abs(request[i] - head);
            head = request[i];
        }
        // Move to the beginning (track 0)
        total += abs(head - 0);
        head = 0;
        // Move towards higher tracks
        for (i = index; i < n; i++) {
            printf("%d ", request[i]);
            total += abs(request[i] - head);
            head = request[i];
        }
    }

    printf("\nTotal Seek Time = %d\n", total);
    printf("Average Seek Time = %.2f\n", (float)total / n);

    return 0;
}
