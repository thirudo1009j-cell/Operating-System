
#include <stdio.h>

int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;
    for (i = 1; i < n; ++i) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}

int main() {
    int no_of_frames, no_of_pages, frames[10], pages[30], counter = 0, time[10];
    int flag1, flag2, i, j, pos, faults = 0;

    printf("Enter number of frames: ");
    scanf("%d", &no_of_frames);

    printf("Enter number of pages: ");
    scanf("%d", &no_of_pages);

    printf("Enter page reference string: ");
    for (i = 0; i < no_of_pages; ++i)
        scanf("%d", &pages[i]);

    for (i = 0; i < no_of_frames; ++i)
        frames[i] = -1;

    printf("\nPage Replacement Process:\n");

    for (i = 0; i < no_of_pages; ++i) {
        flag1 = flag2 = 0;

        // Check if page already in frame (Page Hit)
        for (j = 0; j < no_of_frames; ++j) {
            if (frames[j] == pages[i]) {
                counter++;
                time[j] = counter;
                flag1 = flag2 = 1;
                printf("Page %d -> No Replacement (Page Hit)\n", pages[i]);
                break;
            }
        }

        // If not found and there's an empty frame (Page Fault)
        if (flag1 == 0) {
            for (j = 0; j < no_of_frames; ++j) {
                if (frames[j] == -1) {
                    counter++;
                    faults++;
                    frames[j] = pages[i];
                    time[j] = counter;
                    flag2 = 1;
                    printf("Page %d -> ", pages[i]);
                    for (int k = 0; k < no_of_frames; k++) {
                        if (frames[k] != -1)
                            printf("%d ", frames[k]);
                        else
                            printf("- ");
                    }
                    printf("(Page Fault)\n");
                    break;
                }
            }
        }

        // If full, replace least recently used page
        if (flag2 == 0) {
            pos = findLRU(time, no_of_frames);
            counter++;
            faults++;
            frames[pos] = pages[i];
            time[pos] = counter;

            printf("Page %d -> ", pages[i]);
            for (int k = 0; k < no_of_frames; k++) {
                if (frames[k] != -1)
                    printf("%d ", frames[k]);
                else
                    printf("- ");
            }
            printf("(Page Fault)\n");
        }
    }

    printf("\nTotal Page Faults = %d\n", faults);
    return 0;
}
